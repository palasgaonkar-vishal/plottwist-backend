name: PlotTwist Backend CI/CD Pipeline
# Task 011: Deployment Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Continuous Integration
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: plottwist
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: plottwist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 mypy

      - name: Run code formatting check
        run: black --check --diff .

      - name: Run linting
        run: flake8 .

      - name: Run type checking
        run: mypy app/ --ignore-missing-imports

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://plottwist:testpassword@localhost:5432/plottwist_test
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          python -m pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=70

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: securecodewarrior/github-action-bandit@v1.0.1
        with:
          config_file: .bandit

      - name: Run Safety check for dependencies
        run: |
          pip install safety
          safety check --json

  # Build and publish Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/plottwist-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/plottwist-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /opt/plottwist
            
            # Pull latest code
            cd plottwist-backend
            git pull origin main
            cd ..
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Install/update dependencies
            cd plottwist-backend
            pip install -r requirements.txt
            
            # Run database migrations
            python -m alembic upgrade head
            
            # Restart backend service
            sudo systemctl restart plottwist-backend
            
            # Check service status
            sudo systemctl is-active plottwist-backend
            
            echo "Backend deployment completed successfully!"

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.BACKEND_URL }}/api/v1/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow 