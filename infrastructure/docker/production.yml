# PlotTwist Production Docker Compose
# Task 011: Deployment Infrastructure

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: plottwist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: plottwist
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: plottwist
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - plottwist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plottwist -d plottwist"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    image: ${DOCKER_USERNAME}/plottwist-backend:latest
    container_name: plottwist-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://plottwist:${DB_PASSWORD}@postgres:5432/plottwist
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: production
      FRONTEND_URL: https://${FRONTEND_DOMAIN}
      BACKEND_URL: https://${BACKEND_DOMAIN}
      ALLOWED_HOSTS: ${BACKEND_DOMAIN},${FRONTEND_DOMAIN}
    ports:
      - "8000:8000"
    networks:
      - plottwist-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    image: ${DOCKER_USERNAME}/plottwist-frontend:latest
    container_name: plottwist-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: https://${BACKEND_DOMAIN}
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - plottwist-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: plottwist-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/certs:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - plottwist-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: plottwist-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - plottwist-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: plottwist-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - plottwist-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: plottwist-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - plottwist-network

networks:
  plottwist-network:
    driver: bridge
    name: plottwist-network

volumes:
  postgres_data:
    name: plottwist-postgres-data
  redis_data:
    name: plottwist-redis-data
  prometheus_data:
    name: plottwist-prometheus-data
  grafana_data:
    name: plottwist-grafana-data 